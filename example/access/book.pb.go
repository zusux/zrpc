// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: book.proto

package access

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/metaverse/truss/deftree/googlethirdparty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Book struct {
	// @inject_tag: json:"id" gorm:"column:id;PRIMARY_KEY;AUTO_INCREMENT"
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"uid" gorm:"column:uid"
	Uid      int64  `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	UserCode string `protobuf:"bytes,3,opt,name=user_code,json=userCode,proto3" json:"user_code,omitempty"`
	// @inject_tag: json:"cat_id" gorm:"column:cat_id"
	CatId int64 `protobuf:"varint,4,opt,name=cat_id,json=catId,proto3" json:"cat_id,omitempty"`
	// @inject_tag: json:"name" gorm:"column:name"
	Name     string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	BookCode string `protobuf:"bytes,6,opt,name=book_code,json=bookCode,proto3" json:"book_code,omitempty"`
	// @inject_tag: json:"author" gorm:"column:author"
	Author string `protobuf:"bytes,7,opt,name=author,proto3" json:"author,omitempty"`
	// @inject_tag: json:"intro" gorm:"column:intro"
	Intro string `protobuf:"bytes,8,opt,name=intro,proto3" json:"intro,omitempty"`
	// @inject_tag: json:"images" gorm:"column:images"
	Images string `protobuf:"bytes,9,opt,name=images,proto3" json:"images,omitempty"`
	// @inject_tag: json:"status" gorm:"column:status"
	Status int64 `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"click" gorm:"column:click"
	Click int64 `protobuf:"varint,11,opt,name=click,proto3" json:"click,omitempty"`
	// @inject_tag: json:"is_private" gorm:"column:is_private"
	IsPrivate int64 `protobuf:"varint,12,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	// @inject_tag: json:"created_at" gorm:"column:created_at"
	CreatedAt int64 `protobuf:"varint,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// @inject_tag: json:"updated_at" gorm:"column:updated_at"
	UpdatedAt int64 `protobuf:"varint,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (m *Book) Reset()         { *m = Book{} }
func (m *Book) String() string { return proto.CompactTextString(m) }
func (*Book) ProtoMessage()    {}
func (*Book) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e89d0eaa98dc5d8, []int{0}
}
func (m *Book) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Book) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Book.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Book) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Book.Merge(m, src)
}
func (m *Book) XXX_Size() int {
	return m.Size()
}
func (m *Book) XXX_DiscardUnknown() {
	xxx_messageInfo_Book.DiscardUnknown(m)
}

var xxx_messageInfo_Book proto.InternalMessageInfo

func (m *Book) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Book) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *Book) GetUserCode() string {
	if m != nil {
		return m.UserCode
	}
	return ""
}

func (m *Book) GetCatId() int64 {
	if m != nil {
		return m.CatId
	}
	return 0
}

func (m *Book) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Book) GetBookCode() string {
	if m != nil {
		return m.BookCode
	}
	return ""
}

func (m *Book) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Book) GetIntro() string {
	if m != nil {
		return m.Intro
	}
	return ""
}

func (m *Book) GetImages() string {
	if m != nil {
		return m.Images
	}
	return ""
}

func (m *Book) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Book) GetClick() int64 {
	if m != nil {
		return m.Click
	}
	return 0
}

func (m *Book) GetIsPrivate() int64 {
	if m != nil {
		return m.IsPrivate
	}
	return 0
}

func (m *Book) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Book) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

// book list
type BookListReq struct {
	CatId     int64  `protobuf:"varint,1,opt,name=cat_id,json=catId,proto3" json:"cat_id,omitempty"`
	Uid       int64  `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	UserCode  string `protobuf:"bytes,3,opt,name=user_code,json=userCode,proto3" json:"user_code,omitempty"`
	Name      string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	BookCode  string `protobuf:"bytes,5,opt,name=book_code,json=bookCode,proto3" json:"book_code,omitempty"`
	Author    string `protobuf:"bytes,6,opt,name=author,proto3" json:"author,omitempty"`
	Page      int64  `protobuf:"varint,7,opt,name=page,proto3" json:"page,omitempty"`
	Limit     int64  `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	IsPrivate int64  `protobuf:"varint,9,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
}

func (m *BookListReq) Reset()         { *m = BookListReq{} }
func (m *BookListReq) String() string { return proto.CompactTextString(m) }
func (*BookListReq) ProtoMessage()    {}
func (*BookListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e89d0eaa98dc5d8, []int{1}
}
func (m *BookListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BookListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BookListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BookListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookListReq.Merge(m, src)
}
func (m *BookListReq) XXX_Size() int {
	return m.Size()
}
func (m *BookListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BookListReq.DiscardUnknown(m)
}

var xxx_messageInfo_BookListReq proto.InternalMessageInfo

func (m *BookListReq) GetCatId() int64 {
	if m != nil {
		return m.CatId
	}
	return 0
}

func (m *BookListReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *BookListReq) GetUserCode() string {
	if m != nil {
		return m.UserCode
	}
	return ""
}

func (m *BookListReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BookListReq) GetBookCode() string {
	if m != nil {
		return m.BookCode
	}
	return ""
}

func (m *BookListReq) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *BookListReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *BookListReq) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *BookListReq) GetIsPrivate() int64 {
	if m != nil {
		return m.IsPrivate
	}
	return 0
}

type BookListRsp struct {
	// @inject_tag: json:"code"
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// @inject_tag: json:"message"
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// @inject_tag: json:"data"
	Data []*Book `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *BookListRsp) Reset()         { *m = BookListRsp{} }
func (m *BookListRsp) String() string { return proto.CompactTextString(m) }
func (*BookListRsp) ProtoMessage()    {}
func (*BookListRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e89d0eaa98dc5d8, []int{2}
}
func (m *BookListRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BookListRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BookListRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BookListRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookListRsp.Merge(m, src)
}
func (m *BookListRsp) XXX_Size() int {
	return m.Size()
}
func (m *BookListRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_BookListRsp.DiscardUnknown(m)
}

var xxx_messageInfo_BookListRsp proto.InternalMessageInfo

func (m *BookListRsp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *BookListRsp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *BookListRsp) GetData() []*Book {
	if m != nil {
		return m.Data
	}
	return nil
}

//查找单个
type BookInfoReq struct {
	BookId    int64  `protobuf:"varint,1,opt,name=book_id,json=bookId,proto3" json:"book_id,omitempty"`
	Uid       int64  `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	UserCode  string `protobuf:"bytes,3,opt,name=user_code,json=userCode,proto3" json:"user_code,omitempty"`
	BookCode  string `protobuf:"bytes,4,opt,name=book_code,json=bookCode,proto3" json:"book_code,omitempty"`
	IsPrivate int64  `protobuf:"varint,5,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
}

func (m *BookInfoReq) Reset()         { *m = BookInfoReq{} }
func (m *BookInfoReq) String() string { return proto.CompactTextString(m) }
func (*BookInfoReq) ProtoMessage()    {}
func (*BookInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e89d0eaa98dc5d8, []int{3}
}
func (m *BookInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BookInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BookInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BookInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookInfoReq.Merge(m, src)
}
func (m *BookInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *BookInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BookInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_BookInfoReq proto.InternalMessageInfo

func (m *BookInfoReq) GetBookId() int64 {
	if m != nil {
		return m.BookId
	}
	return 0
}

func (m *BookInfoReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *BookInfoReq) GetUserCode() string {
	if m != nil {
		return m.UserCode
	}
	return ""
}

func (m *BookInfoReq) GetBookCode() string {
	if m != nil {
		return m.BookCode
	}
	return ""
}

func (m *BookInfoReq) GetIsPrivate() int64 {
	if m != nil {
		return m.IsPrivate
	}
	return 0
}

type BookInfoRsp struct {
	// @inject_tag: json:"code"
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// @inject_tag: json:"message"
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// @inject_tag: json:"data"
	Data *Book `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *BookInfoRsp) Reset()         { *m = BookInfoRsp{} }
func (m *BookInfoRsp) String() string { return proto.CompactTextString(m) }
func (*BookInfoRsp) ProtoMessage()    {}
func (*BookInfoRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e89d0eaa98dc5d8, []int{4}
}
func (m *BookInfoRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BookInfoRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BookInfoRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BookInfoRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookInfoRsp.Merge(m, src)
}
func (m *BookInfoRsp) XXX_Size() int {
	return m.Size()
}
func (m *BookInfoRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_BookInfoRsp.DiscardUnknown(m)
}

var xxx_messageInfo_BookInfoRsp proto.InternalMessageInfo

func (m *BookInfoRsp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *BookInfoRsp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *BookInfoRsp) GetData() *Book {
	if m != nil {
		return m.Data
	}
	return nil
}

//添加
type BookAddReq struct {
	Uid       int64  `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	UserCode  string `protobuf:"bytes,3,opt,name=user_code,json=userCode,proto3" json:"user_code,omitempty"`
	CatId     int64  `protobuf:"varint,4,opt,name=cat_id,json=catId,proto3" json:"cat_id,omitempty"`
	Name      string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	BookCode  string `protobuf:"bytes,6,opt,name=book_code,json=bookCode,proto3" json:"book_code,omitempty"`
	Author    string `protobuf:"bytes,7,opt,name=author,proto3" json:"author,omitempty"`
	Intro     string `protobuf:"bytes,8,opt,name=intro,proto3" json:"intro,omitempty"`
	Images    string `protobuf:"bytes,9,opt,name=images,proto3" json:"images,omitempty"`
	Status    int64  `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	IsPrivate int64  `protobuf:"varint,12,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
}

func (m *BookAddReq) Reset()         { *m = BookAddReq{} }
func (m *BookAddReq) String() string { return proto.CompactTextString(m) }
func (*BookAddReq) ProtoMessage()    {}
func (*BookAddReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e89d0eaa98dc5d8, []int{5}
}
func (m *BookAddReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BookAddReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BookAddReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BookAddReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookAddReq.Merge(m, src)
}
func (m *BookAddReq) XXX_Size() int {
	return m.Size()
}
func (m *BookAddReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BookAddReq.DiscardUnknown(m)
}

var xxx_messageInfo_BookAddReq proto.InternalMessageInfo

func (m *BookAddReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *BookAddReq) GetUserCode() string {
	if m != nil {
		return m.UserCode
	}
	return ""
}

func (m *BookAddReq) GetCatId() int64 {
	if m != nil {
		return m.CatId
	}
	return 0
}

func (m *BookAddReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BookAddReq) GetBookCode() string {
	if m != nil {
		return m.BookCode
	}
	return ""
}

func (m *BookAddReq) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *BookAddReq) GetIntro() string {
	if m != nil {
		return m.Intro
	}
	return ""
}

func (m *BookAddReq) GetImages() string {
	if m != nil {
		return m.Images
	}
	return ""
}

func (m *BookAddReq) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *BookAddReq) GetIsPrivate() int64 {
	if m != nil {
		return m.IsPrivate
	}
	return 0
}

type BookAddRsp struct {
	// @inject_tag: json:"code"
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// @inject_tag: json:"message"
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// @inject_tag: json:"data"
	Data *Book `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *BookAddRsp) Reset()         { *m = BookAddRsp{} }
func (m *BookAddRsp) String() string { return proto.CompactTextString(m) }
func (*BookAddRsp) ProtoMessage()    {}
func (*BookAddRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e89d0eaa98dc5d8, []int{6}
}
func (m *BookAddRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BookAddRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BookAddRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BookAddRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookAddRsp.Merge(m, src)
}
func (m *BookAddRsp) XXX_Size() int {
	return m.Size()
}
func (m *BookAddRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_BookAddRsp.DiscardUnknown(m)
}

var xxx_messageInfo_BookAddRsp proto.InternalMessageInfo

func (m *BookAddRsp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *BookAddRsp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *BookAddRsp) GetData() *Book {
	if m != nil {
		return m.Data
	}
	return nil
}

//编辑
type BookEditReq struct {
	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uid       int64  `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	UserCode  string `protobuf:"bytes,3,opt,name=user_code,json=userCode,proto3" json:"user_code,omitempty"`
	CatId     int64  `protobuf:"varint,4,opt,name=cat_id,json=catId,proto3" json:"cat_id,omitempty"`
	Name      string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	BookCode  string `protobuf:"bytes,6,opt,name=book_code,json=bookCode,proto3" json:"book_code,omitempty"`
	Author    string `protobuf:"bytes,7,opt,name=author,proto3" json:"author,omitempty"`
	Intro     string `protobuf:"bytes,8,opt,name=intro,proto3" json:"intro,omitempty"`
	Images    string `protobuf:"bytes,9,opt,name=images,proto3" json:"images,omitempty"`
	Status    int64  `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	IsPrivate int64  `protobuf:"varint,12,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
}

func (m *BookEditReq) Reset()         { *m = BookEditReq{} }
func (m *BookEditReq) String() string { return proto.CompactTextString(m) }
func (*BookEditReq) ProtoMessage()    {}
func (*BookEditReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e89d0eaa98dc5d8, []int{7}
}
func (m *BookEditReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BookEditReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BookEditReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BookEditReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookEditReq.Merge(m, src)
}
func (m *BookEditReq) XXX_Size() int {
	return m.Size()
}
func (m *BookEditReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BookEditReq.DiscardUnknown(m)
}

var xxx_messageInfo_BookEditReq proto.InternalMessageInfo

func (m *BookEditReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BookEditReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *BookEditReq) GetUserCode() string {
	if m != nil {
		return m.UserCode
	}
	return ""
}

func (m *BookEditReq) GetCatId() int64 {
	if m != nil {
		return m.CatId
	}
	return 0
}

func (m *BookEditReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BookEditReq) GetBookCode() string {
	if m != nil {
		return m.BookCode
	}
	return ""
}

func (m *BookEditReq) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *BookEditReq) GetIntro() string {
	if m != nil {
		return m.Intro
	}
	return ""
}

func (m *BookEditReq) GetImages() string {
	if m != nil {
		return m.Images
	}
	return ""
}

func (m *BookEditReq) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *BookEditReq) GetIsPrivate() int64 {
	if m != nil {
		return m.IsPrivate
	}
	return 0
}

type BookEditRsp struct {
	// @inject_tag: json:"code"
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// @inject_tag: json:"message"
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// @inject_tag: json:"data"
	Data *Book `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *BookEditRsp) Reset()         { *m = BookEditRsp{} }
func (m *BookEditRsp) String() string { return proto.CompactTextString(m) }
func (*BookEditRsp) ProtoMessage()    {}
func (*BookEditRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e89d0eaa98dc5d8, []int{8}
}
func (m *BookEditRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BookEditRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BookEditRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BookEditRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookEditRsp.Merge(m, src)
}
func (m *BookEditRsp) XXX_Size() int {
	return m.Size()
}
func (m *BookEditRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_BookEditRsp.DiscardUnknown(m)
}

var xxx_messageInfo_BookEditRsp proto.InternalMessageInfo

func (m *BookEditRsp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *BookEditRsp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *BookEditRsp) GetData() *Book {
	if m != nil {
		return m.Data
	}
	return nil
}

//编辑
type BookDeleteReq struct {
	Id     int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ids    []int64 `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Uid    int64   `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	CatId  int64   `protobuf:"varint,4,opt,name=cat_id,json=catId,proto3" json:"cat_id,omitempty"`
	Name   string  `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Author string  `protobuf:"bytes,6,opt,name=author,proto3" json:"author,omitempty"`
}

func (m *BookDeleteReq) Reset()         { *m = BookDeleteReq{} }
func (m *BookDeleteReq) String() string { return proto.CompactTextString(m) }
func (*BookDeleteReq) ProtoMessage()    {}
func (*BookDeleteReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e89d0eaa98dc5d8, []int{9}
}
func (m *BookDeleteReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BookDeleteReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BookDeleteReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BookDeleteReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookDeleteReq.Merge(m, src)
}
func (m *BookDeleteReq) XXX_Size() int {
	return m.Size()
}
func (m *BookDeleteReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BookDeleteReq.DiscardUnknown(m)
}

var xxx_messageInfo_BookDeleteReq proto.InternalMessageInfo

func (m *BookDeleteReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BookDeleteReq) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *BookDeleteReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *BookDeleteReq) GetCatId() int64 {
	if m != nil {
		return m.CatId
	}
	return 0
}

func (m *BookDeleteReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BookDeleteReq) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

type BookDeleteRsp struct {
	// @inject_tag: json:"code"
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// @inject_tag: json:"message"
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// @inject_tag: json:"data"
	Data []int64 `protobuf:"varint,3,rep,packed,name=data,proto3" json:"data,omitempty"`
	// @inject_tag: json:"rows"
	Rows int64 `protobuf:"varint,4,opt,name=rows,proto3" json:"rows,omitempty"`
}

func (m *BookDeleteRsp) Reset()         { *m = BookDeleteRsp{} }
func (m *BookDeleteRsp) String() string { return proto.CompactTextString(m) }
func (*BookDeleteRsp) ProtoMessage()    {}
func (*BookDeleteRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e89d0eaa98dc5d8, []int{10}
}
func (m *BookDeleteRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BookDeleteRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BookDeleteRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BookDeleteRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookDeleteRsp.Merge(m, src)
}
func (m *BookDeleteRsp) XXX_Size() int {
	return m.Size()
}
func (m *BookDeleteRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_BookDeleteRsp.DiscardUnknown(m)
}

var xxx_messageInfo_BookDeleteRsp proto.InternalMessageInfo

func (m *BookDeleteRsp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *BookDeleteRsp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *BookDeleteRsp) GetData() []int64 {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *BookDeleteRsp) GetRows() int64 {
	if m != nil {
		return m.Rows
	}
	return 0
}

//点击
type BookClickReq struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *BookClickReq) Reset()         { *m = BookClickReq{} }
func (m *BookClickReq) String() string { return proto.CompactTextString(m) }
func (*BookClickReq) ProtoMessage()    {}
func (*BookClickReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e89d0eaa98dc5d8, []int{11}
}
func (m *BookClickReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BookClickReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BookClickReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BookClickReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookClickReq.Merge(m, src)
}
func (m *BookClickReq) XXX_Size() int {
	return m.Size()
}
func (m *BookClickReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BookClickReq.DiscardUnknown(m)
}

var xxx_messageInfo_BookClickReq proto.InternalMessageInfo

func (m *BookClickReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type BookClickRsp struct {
	Code    int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Clicked int64  `protobuf:"varint,3,opt,name=clicked,proto3" json:"clicked,omitempty"`
}

func (m *BookClickRsp) Reset()         { *m = BookClickRsp{} }
func (m *BookClickRsp) String() string { return proto.CompactTextString(m) }
func (*BookClickRsp) ProtoMessage()    {}
func (*BookClickRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e89d0eaa98dc5d8, []int{12}
}
func (m *BookClickRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BookClickRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BookClickRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BookClickRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookClickRsp.Merge(m, src)
}
func (m *BookClickRsp) XXX_Size() int {
	return m.Size()
}
func (m *BookClickRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_BookClickRsp.DiscardUnknown(m)
}

var xxx_messageInfo_BookClickRsp proto.InternalMessageInfo

func (m *BookClickRsp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *BookClickRsp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *BookClickRsp) GetClicked() int64 {
	if m != nil {
		return m.Clicked
	}
	return 0
}

func init() {
	proto.RegisterType((*Book)(nil), "access.Book")
	proto.RegisterType((*BookListReq)(nil), "access.BookListReq")
	proto.RegisterType((*BookListRsp)(nil), "access.BookListRsp")
	proto.RegisterType((*BookInfoReq)(nil), "access.BookInfoReq")
	proto.RegisterType((*BookInfoRsp)(nil), "access.BookInfoRsp")
	proto.RegisterType((*BookAddReq)(nil), "access.BookAddReq")
	proto.RegisterType((*BookAddRsp)(nil), "access.BookAddRsp")
	proto.RegisterType((*BookEditReq)(nil), "access.BookEditReq")
	proto.RegisterType((*BookEditRsp)(nil), "access.BookEditRsp")
	proto.RegisterType((*BookDeleteReq)(nil), "access.BookDeleteReq")
	proto.RegisterType((*BookDeleteRsp)(nil), "access.BookDeleteRsp")
	proto.RegisterType((*BookClickReq)(nil), "access.BookClickReq")
	proto.RegisterType((*BookClickRsp)(nil), "access.BookClickRsp")
}

func init() { proto.RegisterFile("book.proto", fileDescriptor_1e89d0eaa98dc5d8) }

var fileDescriptor_1e89d0eaa98dc5d8 = []byte{
	// 822 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x56, 0x4d, 0x6f, 0x1b, 0x37,
	0x10, 0xf5, 0x7e, 0x48, 0xb2, 0x28, 0xd9, 0x75, 0x59, 0xbb, 0x25, 0xd4, 0x76, 0x21, 0x10, 0x45,
	0x21, 0xf4, 0xa0, 0x05, 0xdc, 0x5b, 0x6f, 0xb6, 0xeb, 0x83, 0x81, 0x1e, 0x0a, 0x01, 0xed, 0x41,
	0xa8, 0x21, 0xd0, 0x4b, 0x5a, 0x26, 0x2c, 0x89, 0xdb, 0x25, 0xe5, 0xa2, 0xb7, 0x20, 0x87, 0x9c,
	0x63, 0xe4, 0xd7, 0xe4, 0x1f, 0xe4, 0x68, 0x20, 0x97, 0x9c, 0x82, 0xc0, 0x4e, 0xfe, 0x47, 0xc0,
	0xe1, 0xae, 0xb5, 0xb2, 0xac, 0x04, 0x42, 0xe0, 0x4b, 0x72, 0xe3, 0x7b, 0xb3, 0x7a, 0x33, 0xf3,
	0x76, 0x76, 0x28, 0x84, 0x4e, 0x94, 0x3a, 0xef, 0xa6, 0x99, 0x32, 0x0a, 0x57, 0x59, 0x92, 0x08,
	0xad, 0x5b, 0x87, 0x43, 0x69, 0xce, 0xa6, 0x27, 0xdd, 0x44, 0x8d, 0xe3, 0xb1, 0x30, 0xec, 0x42,
	0x64, 0x5a, 0xc4, 0x26, 0x9b, 0x6a, 0x1d, 0x73, 0x71, 0x6a, 0x32, 0x21, 0xe2, 0xa1, 0x52, 0xc3,
	0x91, 0x30, 0x67, 0x32, 0xe3, 0x29, 0xcb, 0xcc, 0xff, 0x31, 0x9b, 0x4c, 0x94, 0x61, 0x46, 0xaa,
	0x89, 0x76, 0x72, 0xf4, 0xb5, 0x8f, 0xc2, 0x7d, 0xa5, 0xce, 0xf1, 0x26, 0xf2, 0x25, 0x27, 0x5e,
	0xdb, 0xeb, 0x04, 0x3d, 0x5f, 0x72, 0xbc, 0x85, 0x82, 0xa9, 0xe4, 0xc4, 0x07, 0xc2, 0x1e, 0xf1,
	0xf7, 0xa8, 0x3e, 0xd5, 0x22, 0x1b, 0x24, 0x8a, 0x0b, 0x12, 0xb4, 0xbd, 0x4e, 0xbd, 0xb7, 0x6e,
	0x89, 0x03, 0xc5, 0x05, 0xde, 0x41, 0xd5, 0x84, 0x99, 0x81, 0xe4, 0x24, 0x84, 0x5f, 0x54, 0x12,
	0x66, 0x8e, 0x38, 0xc6, 0x28, 0x9c, 0xb0, 0xb1, 0x20, 0x15, 0x78, 0x1c, 0xce, 0x56, 0xc7, 0xf6,
	0xe3, 0x74, 0xaa, 0x4e, 0xc7, 0x12, 0xa0, 0xf3, 0x2d, 0xaa, 0xb2, 0xa9, 0x39, 0x53, 0x19, 0xa9,
	0x41, 0x24, 0x47, 0x78, 0x1b, 0x55, 0xe4, 0xc4, 0x64, 0x8a, 0xac, 0x03, 0xed, 0x80, 0x7d, 0x5a,
	0x8e, 0xd9, 0x50, 0x68, 0x52, 0x77, 0x4f, 0x3b, 0x64, 0x79, 0x6d, 0x98, 0x99, 0x6a, 0x82, 0xa0,
	0x9a, 0x1c, 0x59, 0x95, 0x64, 0x24, 0x93, 0x73, 0xd2, 0xc8, 0x8b, 0xb4, 0x00, 0xff, 0x88, 0x90,
	0xd4, 0x83, 0x34, 0x93, 0x17, 0xcc, 0x08, 0xd2, 0x84, 0x50, 0x5d, 0xea, 0x3f, 0x1d, 0x61, 0xc3,
	0x49, 0x26, 0x98, 0x11, 0x7c, 0xc0, 0x0c, 0xd9, 0x70, 0xe1, 0x9c, 0xd9, 0x33, 0x36, 0x3c, 0x4d,
	0x79, 0x11, 0xde, 0x74, 0xe1, 0x9c, 0xd9, 0x33, 0xf4, 0x9d, 0x87, 0x1a, 0xd6, 0xe0, 0x3f, 0xa4,
	0x36, 0x3d, 0xf1, 0x6f, 0xc9, 0x28, 0xaf, 0x6c, 0xd4, 0x8a, 0x76, 0x17, 0xbe, 0x86, 0xcb, 0x7c,
	0xad, 0x2c, 0xf5, 0xb5, 0x3a, 0xe7, 0x2b, 0x46, 0x61, 0xca, 0x86, 0x02, 0xdc, 0x0e, 0x7a, 0x70,
	0xb6, 0x2e, 0x8d, 0xe4, 0x58, 0x1a, 0xf0, 0x3a, 0xe8, 0x39, 0x70, 0xc7, 0xa5, 0xfa, 0x1d, 0x97,
	0xe8, 0x71, 0xa9, 0x4d, 0x9d, 0x5a, 0x5d, 0xa8, 0xc3, 0x35, 0x09, 0x67, 0x4c, 0x50, 0x6d, 0x2c,
	0xb4, 0xb6, 0xe9, 0x7c, 0x28, 0xa2, 0x80, 0xb8, 0x8d, 0x42, 0xce, 0x0c, 0x23, 0x41, 0x3b, 0xe8,
	0x34, 0x76, 0x9b, 0x5d, 0x37, 0xe3, 0x5d, 0x2b, 0xd8, 0x83, 0x08, 0xbd, 0xcc, 0x6d, 0x3c, 0x9a,
	0x9c, 0x2a, 0x6b, 0xe3, 0x77, 0xa8, 0x06, 0xcd, 0xde, 0xfa, 0x58, 0xb5, 0x70, 0x75, 0x23, 0xe7,
	0x4c, 0x0b, 0xef, 0x98, 0x36, 0xdf, 0x72, 0x65, 0x49, 0xcb, 0x50, 0xd2, 0x27, 0xb4, 0xec, 0x2d,
	0x69, 0xf9, 0x91, 0x8f, 0x90, 0x85, 0x7b, 0x9c, 0xdb, 0x8e, 0x3f, 0xcb, 0x0f, 0xf2, 0xc3, 0x9f,
	0x1e, 0xfd, 0x67, 0xe6, 0xc0, 0x03, 0x18, 0x7c, 0xe9, 0xbb, 0x17, 0x78, 0xc8, 0x25, 0x7c, 0x9a,
	0x5f, 0xc4, 0x0a, 0xfc, 0x88, 0xe3, 0xc7, 0x25, 0x4b, 0x1e, 0xc0, 0xf2, 0x27, 0x1e, 0xda, 0xb0,
	0xf0, 0x77, 0x31, 0x12, 0x46, 0x2c, 0x31, 0x5d, 0x72, 0x4d, 0xfc, 0x76, 0x60, 0x4d, 0x97, 0x5c,
	0x17, 0xaf, 0x21, 0x98, 0xbd, 0x86, 0x15, 0x9c, 0x5e, 0xb2, 0xf7, 0xa8, 0x98, 0xab, 0x63, 0xe5,
	0x4e, 0x71, 0x69, 0x61, 0x05, 0xae, 0x37, 0xcb, 0x65, 0xea, 0x3f, 0x9d, 0xd7, 0x04, 0x67, 0x1a,
	0xa1, 0xa6, 0x4d, 0x73, 0x60, 0xef, 0x99, 0x7b, 0xba, 0xa5, 0x7f, 0x97, 0xe3, 0x2b, 0x57, 0x41,
	0x50, 0x0d, 0x6e, 0x30, 0x51, 0xb8, 0x53, 0xc0, 0xdd, 0xe7, 0x21, 0xaa, 0x1c, 0xc1, 0xbd, 0xde,
	0x47, 0xeb, 0xc5, 0x5e, 0xc6, 0xdf, 0x94, 0xdf, 0x48, 0x7e, 0x21, 0xb5, 0x16, 0x49, 0x9d, 0xd2,
	0x9f, 0x1e, 0xbf, 0x7c, 0xfb, 0xcc, 0x8f, 0x28, 0x8a, 0xed, 0x58, 0xc6, 0x23, 0xa9, 0x4d, 0x7f,
	0x8b, 0x36, 0x66, 0x28, 0xfe, 0xcd, 0xfb, 0xa5, 0xd0, 0xb6, 0x0b, 0x70, 0x5e, 0x3b, 0xdf, 0xd2,
	0xad, 0x45, 0x72, 0x51, 0x5b, 0x4e, 0x4e, 0xd5, 0x4c, 0xdb, 0x22, 0xd0, 0xfe, 0x0b, 0xd5, 0xf2,
	0x4f, 0x1f, 0xe3, 0xb2, 0x8a, 0xdb, 0x86, 0xad, 0x05, 0x4e, 0xa7, 0x94, 0x82, 0xf0, 0x0f, 0xb4,
	0xee, 0xa4, 0x18, 0xe7, 0xfd, 0xaf, 0x8a, 0x2c, 0x8c, 0xf3, 0x72, 0xc9, 0x76, 0xbe, 0xe7, 0x4b,
	0xce, 0x97, 0x40, 0x6b, 0x91, 0x5c, 0x2c, 0x59, 0x70, 0x59, 0xb2, 0xc3, 0x22, 0xd0, 0xe6, 0x6e,
	0x5b, 0xb9, 0x99, 0xc2, 0x3b, 0x65, 0xa1, 0xdb, 0x79, 0x6f, 0xdd, 0x47, 0xeb, 0x94, 0x76, 0x20,
	0x03, 0xa5, 0x4d, 0xa7, 0xc9, 0x21, 0xd0, 0xc7, 0x74, 0xa3, 0x8c, 0x21, 0xcb, 0x00, 0xd5, 0x6f,
	0x47, 0x06, 0x6f, 0x97, 0xd5, 0x8a, 0x29, 0x6b, 0xdd, 0xc3, 0xea, 0x94, 0xfe, 0x0c, 0x29, 0xda,
	0x45, 0xd9, 0x30, 0x2a, 0xfd, 0xaf, 0x8b, 0x8c, 0x00, 0x6d, 0x82, 0x7d, 0xf2, 0xe2, 0x3a, 0xf2,
	0xae, 0xae, 0x23, 0xef, 0xcd, 0x75, 0xe4, 0x3d, 0xbd, 0x89, 0xd6, 0xae, 0x6e, 0xa2, 0xb5, 0x57,
	0x37, 0xd1, 0xda, 0x49, 0x15, 0xfe, 0x33, 0xfe, 0xfa, 0x3e, 0x00, 0x00, 0xff, 0xff, 0x90, 0x48,
	0x4d, 0xda, 0x90, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IBookClient is the client API for IBook service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IBookClient interface {
	BookList(ctx context.Context, in *BookListReq, opts ...grpc.CallOption) (*BookListRsp, error)
	BookInfo(ctx context.Context, in *BookInfoReq, opts ...grpc.CallOption) (*BookInfoRsp, error)
	BookAdd(ctx context.Context, in *BookAddReq, opts ...grpc.CallOption) (*BookAddRsp, error)
	BookEdit(ctx context.Context, in *BookEditReq, opts ...grpc.CallOption) (*BookEditRsp, error)
	BookDelete(ctx context.Context, in *BookDeleteReq, opts ...grpc.CallOption) (*BookDeleteRsp, error)
	BookClick(ctx context.Context, in *BookClickReq, opts ...grpc.CallOption) (*BookClickRsp, error)
}

type iBookClient struct {
	cc *grpc.ClientConn
}

func NewIBookClient(cc *grpc.ClientConn) IBookClient {
	return &iBookClient{cc}
}

func (c *iBookClient) BookList(ctx context.Context, in *BookListReq, opts ...grpc.CallOption) (*BookListRsp, error) {
	out := new(BookListRsp)
	err := c.cc.Invoke(ctx, "/access.IBook/BookList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iBookClient) BookInfo(ctx context.Context, in *BookInfoReq, opts ...grpc.CallOption) (*BookInfoRsp, error) {
	out := new(BookInfoRsp)
	err := c.cc.Invoke(ctx, "/access.IBook/BookInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iBookClient) BookAdd(ctx context.Context, in *BookAddReq, opts ...grpc.CallOption) (*BookAddRsp, error) {
	out := new(BookAddRsp)
	err := c.cc.Invoke(ctx, "/access.IBook/BookAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iBookClient) BookEdit(ctx context.Context, in *BookEditReq, opts ...grpc.CallOption) (*BookEditRsp, error) {
	out := new(BookEditRsp)
	err := c.cc.Invoke(ctx, "/access.IBook/BookEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iBookClient) BookDelete(ctx context.Context, in *BookDeleteReq, opts ...grpc.CallOption) (*BookDeleteRsp, error) {
	out := new(BookDeleteRsp)
	err := c.cc.Invoke(ctx, "/access.IBook/BookDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iBookClient) BookClick(ctx context.Context, in *BookClickReq, opts ...grpc.CallOption) (*BookClickRsp, error) {
	out := new(BookClickRsp)
	err := c.cc.Invoke(ctx, "/access.IBook/BookClick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IBookServer is the server API for IBook service.
type IBookServer interface {
	BookList(context.Context, *BookListReq) (*BookListRsp, error)
	BookInfo(context.Context, *BookInfoReq) (*BookInfoRsp, error)
	BookAdd(context.Context, *BookAddReq) (*BookAddRsp, error)
	BookEdit(context.Context, *BookEditReq) (*BookEditRsp, error)
	BookDelete(context.Context, *BookDeleteReq) (*BookDeleteRsp, error)
	BookClick(context.Context, *BookClickReq) (*BookClickRsp, error)
}

// UnimplementedIBookServer can be embedded to have forward compatible implementations.
type UnimplementedIBookServer struct {
}

func (*UnimplementedIBookServer) BookList(ctx context.Context, req *BookListReq) (*BookListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookList not implemented")
}
func (*UnimplementedIBookServer) BookInfo(ctx context.Context, req *BookInfoReq) (*BookInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookInfo not implemented")
}
func (*UnimplementedIBookServer) BookAdd(ctx context.Context, req *BookAddReq) (*BookAddRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookAdd not implemented")
}
func (*UnimplementedIBookServer) BookEdit(ctx context.Context, req *BookEditReq) (*BookEditRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookEdit not implemented")
}
func (*UnimplementedIBookServer) BookDelete(ctx context.Context, req *BookDeleteReq) (*BookDeleteRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookDelete not implemented")
}
func (*UnimplementedIBookServer) BookClick(ctx context.Context, req *BookClickReq) (*BookClickRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookClick not implemented")
}

func RegisterIBookServer(s *grpc.Server, srv IBookServer) {
	s.RegisterService(&_IBook_serviceDesc, srv)
}

func _IBook_BookList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IBookServer).BookList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/access.IBook/BookList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IBookServer).BookList(ctx, req.(*BookListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IBook_BookInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IBookServer).BookInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/access.IBook/BookInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IBookServer).BookInfo(ctx, req.(*BookInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IBook_BookAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IBookServer).BookAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/access.IBook/BookAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IBookServer).BookAdd(ctx, req.(*BookAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IBook_BookEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookEditReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IBookServer).BookEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/access.IBook/BookEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IBookServer).BookEdit(ctx, req.(*BookEditReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IBook_BookDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IBookServer).BookDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/access.IBook/BookDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IBookServer).BookDelete(ctx, req.(*BookDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IBook_BookClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookClickReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IBookServer).BookClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/access.IBook/BookClick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IBookServer).BookClick(ctx, req.(*BookClickReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _IBook_serviceDesc = grpc.ServiceDesc{
	ServiceName: "access.IBook",
	HandlerType: (*IBookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BookList",
			Handler:    _IBook_BookList_Handler,
		},
		{
			MethodName: "BookInfo",
			Handler:    _IBook_BookInfo_Handler,
		},
		{
			MethodName: "BookAdd",
			Handler:    _IBook_BookAdd_Handler,
		},
		{
			MethodName: "BookEdit",
			Handler:    _IBook_BookEdit_Handler,
		},
		{
			MethodName: "BookDelete",
			Handler:    _IBook_BookDelete_Handler,
		},
		{
			MethodName: "BookClick",
			Handler:    _IBook_BookClick_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "book.proto",
}

func (m *Book) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Book) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.Id))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.Uid))
	}
	if len(m.UserCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.UserCode)))
		i += copy(dAtA[i:], m.UserCode)
	}
	if m.CatId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.CatId))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.BookCode) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.BookCode)))
		i += copy(dAtA[i:], m.BookCode)
	}
	if len(m.Author) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.Author)))
		i += copy(dAtA[i:], m.Author)
	}
	if len(m.Intro) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.Intro)))
		i += copy(dAtA[i:], m.Intro)
	}
	if len(m.Images) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.Images)))
		i += copy(dAtA[i:], m.Images)
	}
	if m.Status != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.Status))
	}
	if m.Click != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.Click))
	}
	if m.IsPrivate != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.IsPrivate))
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.UpdatedAt))
	}
	return i, nil
}

func (m *BookListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BookListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CatId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.CatId))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.Uid))
	}
	if len(m.UserCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.UserCode)))
		i += copy(dAtA[i:], m.UserCode)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.BookCode) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.BookCode)))
		i += copy(dAtA[i:], m.BookCode)
	}
	if len(m.Author) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.Author)))
		i += copy(dAtA[i:], m.Author)
	}
	if m.Page != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.Page))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.Limit))
	}
	if m.IsPrivate != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.IsPrivate))
	}
	return i, nil
}

func (m *BookListRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BookListRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintBook(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BookInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BookInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BookId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.BookId))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.Uid))
	}
	if len(m.UserCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.UserCode)))
		i += copy(dAtA[i:], m.UserCode)
	}
	if len(m.BookCode) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.BookCode)))
		i += copy(dAtA[i:], m.BookCode)
	}
	if m.IsPrivate != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.IsPrivate))
	}
	return i, nil
}

func (m *BookInfoRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BookInfoRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.Data.Size()))
		n1, err1 := m.Data.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	return i, nil
}

func (m *BookAddReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BookAddReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.Uid))
	}
	if len(m.UserCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.UserCode)))
		i += copy(dAtA[i:], m.UserCode)
	}
	if m.CatId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.CatId))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.BookCode) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.BookCode)))
		i += copy(dAtA[i:], m.BookCode)
	}
	if len(m.Author) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.Author)))
		i += copy(dAtA[i:], m.Author)
	}
	if len(m.Intro) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.Intro)))
		i += copy(dAtA[i:], m.Intro)
	}
	if len(m.Images) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.Images)))
		i += copy(dAtA[i:], m.Images)
	}
	if m.Status != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.Status))
	}
	if m.IsPrivate != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.IsPrivate))
	}
	return i, nil
}

func (m *BookAddRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BookAddRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.Data.Size()))
		n2, err2 := m.Data.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	return i, nil
}

func (m *BookEditReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BookEditReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.Id))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.Uid))
	}
	if len(m.UserCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.UserCode)))
		i += copy(dAtA[i:], m.UserCode)
	}
	if m.CatId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.CatId))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.BookCode) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.BookCode)))
		i += copy(dAtA[i:], m.BookCode)
	}
	if len(m.Author) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.Author)))
		i += copy(dAtA[i:], m.Author)
	}
	if len(m.Intro) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.Intro)))
		i += copy(dAtA[i:], m.Intro)
	}
	if len(m.Images) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.Images)))
		i += copy(dAtA[i:], m.Images)
	}
	if m.Status != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.Status))
	}
	if m.IsPrivate != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.IsPrivate))
	}
	return i, nil
}

func (m *BookEditRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BookEditRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.Data.Size()))
		n3, err3 := m.Data.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	return i, nil
}

func (m *BookDeleteReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BookDeleteReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.Id))
	}
	if len(m.Ids) > 0 {
		dAtA5 := make([]byte, len(m.Ids)*10)
		var j4 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintBook(dAtA, i, uint64(j4))
		i += copy(dAtA[i:], dAtA5[:j4])
	}
	if m.Uid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.Uid))
	}
	if m.CatId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.CatId))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Author) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.Author)))
		i += copy(dAtA[i:], m.Author)
	}
	return i, nil
}

func (m *BookDeleteRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BookDeleteRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Data) > 0 {
		dAtA7 := make([]byte, len(m.Data)*10)
		var j6 int
		for _, num1 := range m.Data {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBook(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	if m.Rows != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.Rows))
	}
	return i, nil
}

func (m *BookClickReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BookClickReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *BookClickRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BookClickRsp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Clicked != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.Clicked))
	}
	return i, nil
}

func encodeVarintBook(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Book) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBook(uint64(m.Id))
	}
	if m.Uid != 0 {
		n += 1 + sovBook(uint64(m.Uid))
	}
	l = len(m.UserCode)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	if m.CatId != 0 {
		n += 1 + sovBook(uint64(m.CatId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	l = len(m.BookCode)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	l = len(m.Intro)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	l = len(m.Images)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovBook(uint64(m.Status))
	}
	if m.Click != 0 {
		n += 1 + sovBook(uint64(m.Click))
	}
	if m.IsPrivate != 0 {
		n += 1 + sovBook(uint64(m.IsPrivate))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovBook(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovBook(uint64(m.UpdatedAt))
	}
	return n
}

func (m *BookListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CatId != 0 {
		n += 1 + sovBook(uint64(m.CatId))
	}
	if m.Uid != 0 {
		n += 1 + sovBook(uint64(m.Uid))
	}
	l = len(m.UserCode)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	l = len(m.BookCode)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovBook(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovBook(uint64(m.Limit))
	}
	if m.IsPrivate != 0 {
		n += 1 + sovBook(uint64(m.IsPrivate))
	}
	return n
}

func (m *BookListRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBook(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovBook(uint64(l))
		}
	}
	return n
}

func (m *BookInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BookId != 0 {
		n += 1 + sovBook(uint64(m.BookId))
	}
	if m.Uid != 0 {
		n += 1 + sovBook(uint64(m.Uid))
	}
	l = len(m.UserCode)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	l = len(m.BookCode)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	if m.IsPrivate != 0 {
		n += 1 + sovBook(uint64(m.IsPrivate))
	}
	return n
}

func (m *BookInfoRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBook(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBook(uint64(l))
	}
	return n
}

func (m *BookAddReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovBook(uint64(m.Uid))
	}
	l = len(m.UserCode)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	if m.CatId != 0 {
		n += 1 + sovBook(uint64(m.CatId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	l = len(m.BookCode)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	l = len(m.Intro)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	l = len(m.Images)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovBook(uint64(m.Status))
	}
	if m.IsPrivate != 0 {
		n += 1 + sovBook(uint64(m.IsPrivate))
	}
	return n
}

func (m *BookAddRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBook(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBook(uint64(l))
	}
	return n
}

func (m *BookEditReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBook(uint64(m.Id))
	}
	if m.Uid != 0 {
		n += 1 + sovBook(uint64(m.Uid))
	}
	l = len(m.UserCode)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	if m.CatId != 0 {
		n += 1 + sovBook(uint64(m.CatId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	l = len(m.BookCode)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	l = len(m.Intro)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	l = len(m.Images)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovBook(uint64(m.Status))
	}
	if m.IsPrivate != 0 {
		n += 1 + sovBook(uint64(m.IsPrivate))
	}
	return n
}

func (m *BookEditRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBook(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBook(uint64(l))
	}
	return n
}

func (m *BookDeleteReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBook(uint64(m.Id))
	}
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovBook(uint64(e))
		}
		n += 1 + sovBook(uint64(l)) + l
	}
	if m.Uid != 0 {
		n += 1 + sovBook(uint64(m.Uid))
	}
	if m.CatId != 0 {
		n += 1 + sovBook(uint64(m.CatId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	return n
}

func (m *BookDeleteRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBook(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	if len(m.Data) > 0 {
		l = 0
		for _, e := range m.Data {
			l += sovBook(uint64(e))
		}
		n += 1 + sovBook(uint64(l)) + l
	}
	if m.Rows != 0 {
		n += 1 + sovBook(uint64(m.Rows))
	}
	return n
}

func (m *BookClickReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBook(uint64(m.Id))
	}
	return n
}

func (m *BookClickRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBook(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	if m.Clicked != 0 {
		n += 1 + sovBook(uint64(m.Clicked))
	}
	return n
}

func sovBook(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBook(x uint64) (n int) {
	return sovBook(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Book) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Book: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Book: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CatId", wireType)
			}
			m.CatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intro", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Intro = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Click", wireType)
			}
			m.Click = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Click |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrivate", wireType)
			}
			m.IsPrivate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsPrivate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BookListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BookListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BookListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CatId", wireType)
			}
			m.CatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrivate", wireType)
			}
			m.IsPrivate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsPrivate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BookListRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BookListRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BookListRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Book{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BookInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BookInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BookInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookId", wireType)
			}
			m.BookId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BookId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrivate", wireType)
			}
			m.IsPrivate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsPrivate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BookInfoRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BookInfoRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BookInfoRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Book{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BookAddReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BookAddReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BookAddReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CatId", wireType)
			}
			m.CatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intro", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Intro = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrivate", wireType)
			}
			m.IsPrivate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsPrivate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BookAddRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BookAddRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BookAddRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Book{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BookEditReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BookEditReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BookEditReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CatId", wireType)
			}
			m.CatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intro", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Intro = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrivate", wireType)
			}
			m.IsPrivate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsPrivate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BookEditRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BookEditRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BookEditRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Book{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BookDeleteReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BookDeleteReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BookDeleteReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBook
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBook
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBook
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBook
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBook
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CatId", wireType)
			}
			m.CatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BookDeleteRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BookDeleteRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BookDeleteRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBook
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Data = append(m.Data, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBook
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBook
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBook
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Data) == 0 {
					m.Data = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBook
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Data = append(m.Data, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			m.Rows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rows |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BookClickReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BookClickReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BookClickReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BookClickRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BookClickRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BookClickRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clicked", wireType)
			}
			m.Clicked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clicked |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBook(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBook
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBook
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthBook
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBook
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBook(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthBook
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBook = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBook   = fmt.Errorf("proto: integer overflow")
)
